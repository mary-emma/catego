import random
import numpy as np  # this was used to print the grid in a neater way


def catego():

    # starting variables
    playerExcept = True
    # these tests check that the number of players is an integer from 1 to 4
    while playerExcept == True:
        try:
            players = int(
                input("Please enter the number of players (from 2-4): "))
            if players > 4:
                players = int(input(
                    "This is an illegal move. Please try again and choose an amount of players from 2 - 4: "))
            if players < 2:
                players = int(input(
                    "This is an illegal move. Please try again and choose an amount of players from 2 - 4: "))
            else:
                playerExcept = False
        except:
            print(
                "This is an illegal move. Please try again and choose an amount of players from 2 - 4: ")

    rows = players  # this creates as many rows as there are players
    columns = 11  # this creates 11 columns

    # this creates the grid used to hold the scores
    grid = [[0 for y in range(columns)] for x in range(rows)]

    # these steps create the scoresheet by using a header with the column numbers the rows from the grid used to hold the scores
    newgrid = [[0 for y in range(columns)] for x in range(rows + 1)]
    newgrid[0] = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    newgrid[1] = grid[0]
    newgrid[2] = grid[1]
    if players == 3:
        newgrid[3] = grid[2]
    if players == 4:
        newgrid[4] = grid[3]

    # these are the starting values for each player's total number of points
    p1total = 0
    p2total = 0
    p3total = 0
    p4total = 0

    # starting functions

    # this function prints the unicode symbol of the die rolled
    def unidice(die):
        if die == 1:
            print(u"\u2680")
        if die == 2:
            print(u"\u2681")
        if die == 3:
            print(u"\u2682")
        if die == 4:
            print(u"\u2683")
        if die == 5:
            print(u"\u2684")
        if die == 6:
            print(u"\u2685")

    # this function places the sum of the player's dice in the column that they choose
    def chooseColumn(colNumber, sum, pNumber):

        # this makes sure that there is not already a value in this space
        while grid[pNumber - 1][colNumber - 2] != 0:
            colNumber = int(input(
                "You already have a value in this column. Please choose a different column from 1 to 12: "))
        grid[pNumber - 1][colNumber - 2] = sum

    # this function prints the scoresheet as a 2-D list
    def scoresheet(playerNum):
        print(np.matrix(newgrid))

    # this function checks that the column number entered is an integer from 2 to 12
    def columnExcept(playNum, numOfPlayers):
        if numOfPlayers == 2:
            if playNum == 1:
                playerX = player1
                psum = p1sum
            if playNum == 2:
                playerX = player2
                psum = p2sum
        if numOfPlayers == 3:
            if playNum == 1:
                playerX = player1
                psum = p1sum
            if playNum == 2:
                playerX = player2
                psum = p2sum
            if playNum == 3:
                playerX = player3
                psum = p3sum
        if numOfPlayers == 4:
            if playNum == 1:
                playerX = player1
                psum = p1sum
            if playNum == 2:
                playerX = player2
                psum = p2sum
            if playNum == 3:
                playerX = player3
                psum = p3sum
            if playNum == 4:
                playerX = player4
                psum = p4sum

        exception = True
        while exception == True:
            try:
                column = int(input(playerX + " rolled " + str(psum) +
                             ". Please enter a number from 2 to 12 to choose this roll's column: "))
                while column > 12 or column < 2:
                    column = int(
                        input("The column number must be from 1 to 12. Please try again: "))
                exception = False
            except:
                print("This is an illegal move. Please try again.")
        return column

    # this makes sure that there is not a tie for the maximum value of the column
    def tieCheck(playNumber, column, maxX):
        if playNumber == 2:
            if grid[0][column - 2] == grid[1][column - 2] and grid[0][column - 2] == maxX:
                return 0
            else:
                return maxX
        if playNumber == 3:
            if grid[0][column - 2] == grid[1][column - 2] and grid[0][column - 2] == maxX:  # 1, 2 tie
                return 0
            if grid[0][column - 2] == grid[2][column - 2] and grid[0][column - 2] == maxX:  # 1, 3 tie
                return 0
            if grid[1][column - 2] == grid[2][column - 2] and grid[1][column - 2] == maxX:  # 2, 3 tie
                return 0
            else:
                return maxX
        if playNumber == 4:
            if grid[0][column - 2] == grid[1][column - 2] and grid[0][column - 2] == maxX:  # 1, 2 tie
                return 0
            if grid[0][column - 2] == grid[2][column - 2] and grid[0][column - 2] == maxX:  # 1, 3 tie
                return 0
            if grid[0][column - 2] == grid[3][column - 2] and grid[0][column - 2] == maxX:  # 1, 4 tie
                return 0
            if grid[1][column - 2] == grid[2][column - 2] and grid[1][column - 2] == maxX:  # 2, 3 tie
                return 0
            if grid[1][column - 2] == grid[3][column - 2] and grid[1][column - 2] == maxX:  # 2, 4 tie
                return 0
            if grid[2][column - 2] == grid[3][column - 2] and grid[2][column - 2] == maxX:  # 3, 4 tie
                return 0
            # other tests such as 1, 2, 3 tie are not needed here
            # this is because if 1, 2 and 3 tied for the highest score, 1 and 2 would tie and 0 would be returned.

            else:
                return maxX

    # this determines whether Player 1 had the highest score for a column.
    def add1(maxNum, columnNum):
        if maxNum != 0:
            # if Player 1 had the highest score for a column, they recieve the points for that column
            if maxNum == grid[0][columnNum - 2]:
                return columnNum
            else:
                return 0  # otherwise they recieve no points for this column
        else:
            return 0

    # this determines whether Player 2 had the highest score for a column.
    def add2(maxNum, columnNum):
        if maxNum != 0:
            if maxNum == grid[1][columnNum - 2]:
                return columnNum
            else:
                return 0
        else:
            return 0

    # this determines whether Player 3 had the highest score for a column.
    def add3(maxNum, columnNum):
        if maxNum != 0:
            if maxNum == grid[2][columnNum - 2]:
                return columnNum
            else:
                return 0
        else:
            return 0

    # this determines whether Player 4 had the highest score for a column.
    def add4(maxNum, columnNum):
        if maxNum != 0:
            if maxNum == grid[3][columnNum - 2]:
                return columnNum
            else:
                return 0
        else:
            return 0

    rules = input(
        "Welcome to Catego! Would you like to learn the rules? Enter Yes or No: ")
    while rules != "Yes" and rules != "No":
        rules = input("Enter Yes to learn the rules or No to skip them: ")
    if rules == "Yes":
        print("Great! Press enter to continue once you understand each rule.")
        input()
        print("The objective of the game is to score the highest number of points by winning categories numbered from 2 through 12. ")
        input()
        print("The scorecard of the game contains columns numbered from 2 to 12. Here's what the scorecard looks like.")
        input()
        scoresheet(players)
        input()
        print("The first row contains the headers labeling each column. The other rows contain the players' scores for each column.")
        input()
        print("Each player rolls two dice and records their sum in a column.")
        input()
        print("The value is not related to the column number, so any sum can be recorded in any column.")
        input()
        print("You must put one value in each column. Once a value is recorded in a column, it cannot be changed or replaced.")
        input()
        print("At the end of the game, the player with the maximum value in each column has the column number added to their point total.")
        input()
        print("Let's look at an example: ")
        input()
        grid[0][0] = 3
        grid[1][0] = 8
        scoresheet(2)
        grid[0][0] = 0
        grid[1][0] = 0
        print()
        print("In this example, Player 1 has a value of 3 in the 2 column and Player 2 has a value of 8 in the same one. ")
        input()
        print("Since Player 2's value for this column is greater, they win the column.")
        input()
        print("Because these values are in column 2, their score would be 2.")
        input()
        print("If two players have the same value in a column and this is also the maximum value for that column, no one is awarded any points")
        input()
        print("The player with the most points at the end of the game is the winner.")
        input()
        print("That's all for now! Let's get started.")
    else:
        print("Great! Let's get started.")

    if players == 2:
        player1 = input("Please enter player 1's name: ")
        player2 = input("Please enter player 2's name: ")

        rounds = 0  # this variable will keep track of the rounds that have been played

        # this loop will run until all 11 rounds are played (filling in spaces 2 to 12)
        while rounds < 11:

            p1d1 = random.randint(1, 6)
            p1d2 = random.randint(1, 6)
            # this rolls two random dice
            p1sum = p1d1 + p1d2
            # this adds them together
            unidice(p1d1)
            unidice(p1d2)
            scoresheet(2)

            column = columnExcept(1, 2)
            chooseColumn(column, p1sum, 1)

            p2d1 = random.randint(1, 6)
            p2d2 = random.randint(1, 6)
            p2sum = p2d1 + p2d2
            unidice(p2d1)
            unidice(p2d2)
            scoresheet(2)

            column = columnExcept(2, 2)
            chooseColumn(column, p2sum, 2)

            rounds += 1
            # now that all players have gone, the round is finished and 1 is added to the variable rounds

        # once the loop is finished and 11 rounds have been played, the scores are added together

        # this finds the maximum value for the column
        max2a = max([i[0] for i in grid])
        # this uses the tieCheck function above to ensure that there is not a tie for the maximum value of this column
        max2 = tieCheck(2, 2, max2a)

        p1total += add1(max2, 2)
        p2total += add2(max2, 2)

        max3a = max([i[1] for i in grid])
        max3 = tieCheck(2, 3, max3a)

        p1total += add1(max3, 3)
        p2total += add2(max3, 3)

        max4a = max([i[2] for i in grid])
        max4 = tieCheck(2, 4, max4a)

        p1total += add1(max4, 4)
        p2total += add2(max4, 4)

        max5a = max([i[3] for i in grid])
        max5 = tieCheck(2, 5, max5a)

        p1total += add1(max5, 5)
        p2total += add2(max5, 5)

        max6a = max([i[4] for i in grid])
        max6 = tieCheck(2, 6, max6a)

        p1total += add1(max6, 6)
        p2total += add2(max6, 6)

        max7a = max([i[5] for i in grid])
        max7 = tieCheck(2, 7, max7a)

        p1total += add1(max7, 7)
        p2total += add2(max7, 7)

        max8a = max([i[6] for i in grid])
        max8 = tieCheck(2, 8, max8a)

        p1total += add1(max8, 8)
        p2total += add2(max8, 8)

        max9a = max([i[7] for i in grid])
        max9 = tieCheck(2, 9, max9a)

        p1total += add1(max9, 9)
        p2total += add2(max9, 9)

        max10a = max([i[8] for i in grid])
        max10 = tieCheck(2, 10, max10a)

        p1total += add1(max10, 10)
        p2total += add2(max10, 10)

        max11a = max([i[9] for i in grid])
        max11 = tieCheck(2, 11, max11a)

        p1total += add1(max11, 11)
        p2total += add2(max11, 11)

        max12a = max([i[10] for i in grid])
        max12 = tieCheck(2, 12, max12a)

        p1total += add1(max12, 12)
        p2total += add2(max12, 12)

        # the following prints the scoresheet, the amount of points each player earned and the winner of the game
        scoresheet(2)
        print(player1 + " got " + str(p1total) + " points.")
        print(player2 + " got " + str(p2total) + " points.")
        if p1total > p2total:
            print(player1 + " wins!")
        if p2total > p1total:
            print(player2 + " wins!")
        if p2total == p1total:  # this checks for a tie
            print(player1 + " and " + player2 + " tied.")

    if players == 3:
        player1 = input("Please enter player 1's name: ")
        player2 = input("Please enter player 2's name: ")
        player3 = input("Please enter player 3's name: ")

        rounds = 0  # this variable will keep track of the rounds that have been played

        while rounds < 11:  # this loop will run until all 12 rounds are played

            p1d1 = random.randint(1, 6)
            p1d2 = random.randint(1, 6)
            p1sum = p1d1 + p1d2
            unidice(p1d1)
            unidice(p1d2)
            scoresheet(3)

            column = columnExcept(1, 3)
            chooseColumn(column, p1sum, 1)

            p2d1 = random.randint(1, 6)
            p2d2 = random.randint(1, 6)
            p2sum = p2d1 + p2d2
            unidice(p2d1)
            unidice(p2d2)
            scoresheet(3)

            column = columnExcept(2, 3)
            chooseColumn(column, p2sum, 2)

            p3d1 = random.randint(1, 6)
            p3d2 = random.randint(1, 6)
            p3sum = p3d1 + p3d2
            unidice(p3d1)
            unidice(p3d2)
            scoresheet(3)

            column = columnExcept(3, 3)
            chooseColumn(column, p3sum, 3)

            rounds += 1  # now that all players have gone, the round is finished and 1 is added to the variable rounds

        max2a = max([i[0] for i in grid])
        max2 = tieCheck(3, 2, max2a)

        p1total += add1(max2, 2)
        p2total += add2(max2, 2)
        p3total += add3(max2, 2)

        max3a = max([i[1] for i in grid])
        max3 = tieCheck(3, 3, max3a)

        p1total += add1(max3, 3)
        p2total += add2(max3, 3)
        p3total += add3(max3, 3)

        max4a = max([i[2] for i in grid])
        max4 = tieCheck(3, 4, max4a)

        p1total += add1(max4, 4)
        p2total += add2(max4, 4)
        p3total += add3(max4, 4)

        max5a = max([i[3] for i in grid])
        max5 = tieCheck(3, 5, max5a)

        p1total += add1(max5, 5)
        p2total += add2(max5, 5)
        p3total += add3(max5, 5)

        max6a = max([i[4] for i in grid])
        max6 = tieCheck(3, 6, max6a)

        p1total += add1(max6, 6)
        p2total += add2(max6, 6)
        p3total += add3(max6, 6)

        max7a = max([i[5] for i in grid])
        max7 = tieCheck(3, 7, max7a)

        p1total += add1(max7, 7)
        p2total += add2(max7, 7)
        p3total += add3(max7, 7)

        max8a = max([i[6] for i in grid])
        max8 = tieCheck(3, 8, max8a)

        p1total += add1(max8, 8)
        p2total += add2(max8, 8)
        p3total += add3(max8, 8)

        max9a = max([i[7] for i in grid])
        max9 = tieCheck(3, 9, max9a)

        p1total += add1(max9, 9)
        p2total += add2(max9, 9)
        p3total += add3(max9, 9)

        max10a = max([i[8] for i in grid])
        max10 = tieCheck(3, 10, max10a)

        p1total += add1(max10, 10)
        p2total += add2(max10, 10)
        p3total += add3(max10, 10)

        max11a = max([i[9] for i in grid])
        max11 = tieCheck(3, 11, max11a)

        p1total += add1(max11, 11)
        p2total += add2(max11, 11)
        p3total += add3(max11, 11)

        max12 = max([i[10] for i in grid])
        max12 = tieCheck(3, 12, max12a)

        p1total += add1(max12, 12)
        p2total += add2(max12, 12)
        p3total += add3(max12, 12)

        scoresheet(3)
        maxTotal = max(p1total, p2total, p3total)
        print(player1 + " got " + str(p1total) + " points.")
        print(player2 + " got " + str(p2total) + " points.")
        print(player3 + " got " + str(p3total) + " points.")
        if p1total > p2total and p1total > p3total:
            print(player1 + " wins!")
        if p2total > p1total and p2total > p3total:
            print(player2 + " wins!")
        if p3total > p1total and p3total > p2total:
            print(player3 + " wins!")
        if p1total == p2total and p1total == p3total:  # 1, 2, 3
            print("All players tied.")
        elif p1total == p2total and p1total == maxTotal:  # 1, 2
            print(player1 + " and " + player2 + " tied.")
        elif p1total == p3total and p1total == maxTotal:  # 1, 3
            print(player1 + " and " + player3 + " tied.")
        elif p2total == p3total and p2total == maxTotal:  # 2, 3
            print(player3 + " and " + player2 + " tied.")

    if players == 4:
        player1 = input("Please enter player 1's name: ")
        player2 = input("Please enter player 2's name: ")
        player3 = input("Please enter player 3's name: ")
        player4 = input("Please enter player 4's name: ")

        rounds = 0  # this variable will keep track of the rounds that have been played

        while rounds < 11:  # this loop will run until all 12 rounds are played

            p1d1 = random.randint(1, 6)
            p1d2 = random.randint(1, 6)
            p1sum = p1d1 + p1d2
            unidice(p1d1)
            unidice(p1d2)
            scoresheet(4)

            column = columnExcept(1, 4)
            chooseColumn(column, p1sum, 1)

            p2d1 = random.randint(1, 6)
            p2d2 = random.randint(1, 6)
            p2sum = p2d1 + p2d2
            unidice(p2d1)
            unidice(p2d2)
            scoresheet(4)

            column = columnExcept(2, 4)
            chooseColumn(column, p2sum, 2)

            p3d1 = random.randint(1, 6)
            p3d2 = random.randint(1, 6)
            p3sum = p3d1 + p3d2
            unidice(p3d1)
            unidice(p3d2)
            scoresheet(4)

            column = columnExcept(3, 4)
            chooseColumn(column, p3sum, 3)

            p4d1 = random.randint(1, 6)
            p4d2 = random.randint(1, 6)
            p4sum = p4d1 + p4d2
            unidice(p4d1)
            unidice(p4d2)
            scoresheet(4)

            column = columnExcept(4, 4)
            chooseColumn(column, p4sum, 4)

            rounds += 1  # now that all players have gone, the round is finished and 1 is added to the variable rounds

        max2a = max([i[0] for i in grid])
        max2 = tieCheck(4, 2, max2a)

        p1total += add1(max2, 2)
        p2total += add2(max2, 2)
        p3total += add3(max2, 2)
        p4total += add4(max2, 2)

        max3a = max([i[1] for i in grid])
        max3 = tieCheck(4, 3, max3a)

        p1total += add1(max3, 3)
        p2total += add2(max3, 3)
        p3total += add3(max3, 3)
        p4total += add4(max3, 3)

        max4a = max([i[2] for i in grid])
        max4 = tieCheck(4, 4, max4a)

        p1total += add1(max4, 4)
        p2total += add2(max4, 4)
        p3total += add3(max4, 4)
        p4total += add4(max4, 4)

        max5a = max([i[3] for i in grid])
        max5 = tieCheck(4, 5, max5a)

        p1total += add1(max5, 5)
        p2total += add2(max5, 5)
        p3total += add3(max5, 5)
        p4total += add4(max5, 5)

        max6a = max([i[4] for i in grid])
        max6 = tieCheck(4, 6, max6a)

        p1total += add1(max6, 6)
        p2total += add2(max6, 6)
        p3total += add3(max6, 6)
        p4total += add4(max6, 6)

        max7a = max([i[5] for i in grid])
        max7 = tieCheck(4, 7, max7a)

        p1total += add1(max7, 7)
        p2total += add2(max7, 7)
        p3total += add3(max7, 7)
        p4total += add4(max7, 7)

        max8a = max([i[6] for i in grid])
        max8 = tieCheck(4, 8, max8a)

        p1total += add1(max8, 8)
        p2total += add2(max8, 8)
        p3total += add3(max8, 8)
        p4total += add4(max8, 8)

        max9a = max([i[7] for i in grid])
        max9 = tieCheck(4, 9, max9a)

        p1total += add1(max9, 9)
        p2total += add2(max9, 9)
        p3total += add3(max9, 9)
        p4total += add4(max9, 9)

        max10a = max([i[8] for i in grid])
        max10 = tieCheck(4, 10, max10a)

        p1total += add1(max10, 10)
        p2total += add2(max10, 10)
        p3total += add3(max10, 10)
        p4total += add4(max10, 10)

        max11a = max([i[9] for i in grid])
        max11 = tieCheck(4, 11, max11a)

        p1total += add1(max11, 11)
        p2total += add2(max11, 11)
        p3total += add3(max11, 11)
        p4total += add4(max11, 11)

        max12a = max([i[10] for i in grid])
        max12 = tieCheck(4, 12, max12a)

        p1total += add1(max12, 12)
        p2total += add2(max12, 12)
        p3total += add3(max12, 12)
        p4total += add4(max12, 12)

        scoresheet(4)
        maxTotal = max(p1total, p2total, p3total, p4total)
        print(player1 + " got " + str(p1total) + " points.")
        print(player2 + " got " + str(p2total) + " points.")
        print(player3 + " got " + str(p3total) + " points.")
        print(player4 + " got " + str(p4total) + " points.")
        if p1total > p2total and p1total > p3total and p1total > p4total:
            print(player1 + " wins!")
        if p2total > p1total and p2total > p3total and p2total > p4total:
            print(player2 + " wins!")
        if p3total > p1total and p3total > p2total and p3total > p4total:
            print(player3 + " wins!")
        if p4total > p1total and p4total > p2total and p4total > p3total:
            print(player4 + " wins!")
        if p1total == p2total and p1total == p3total and p1total == p4total:  # 1, 2, 3, 4 tie
            print("All players tied.")
        elif p1total == p3total and p1total == p2total and p1total == maxTotal:  # 1, 2, 3 tie
            print(player1 + " and " + player3 + " and " + player2 + " tied.")
        elif p1total == p3total and p1total == p4total and p1total == maxTotal:  # 1, 3, 4 tie
            print(player1 + " and " + player3 + " and " + player4 + " tied.")
        elif p1total == p4total and p1total == p2total and p1total == maxTotal:  # 1, 2, 4 tie
            print(player1 + " and " + player4 + " and " + player2 + " tied.")
        elif p2total == p3total and p2total == p4total and p2total == maxTotal:  # 2, 3, 4 tie
            print(player4 + " and " + player3 + " and " + player2 + " tied.")
        elif p1total == p2total and p1total == maxTotal:  # 1, 2 tie
            print(player1 + " and " + player2 + " tied.")
        elif p1total == p3total and p1total == maxTotal:  # 1, 3 tie
            print(player1 + " and " + player3 + " tied.")
        elif p1total == p4total and p1total == maxTotal:  # 1, 4 tie
            print(player1 + " and " + player4 + " tied.")
        elif p2total == p3total and p2total == maxTotal:  # 2, 3 tie
            print(player3 + " and " + player2 + " tied.")
        elif p2total == p4total and p2total == maxTotal:  # 2, 4 tie
            print(player4 + " and " + player2 + " tied.")
        elif p4total == p3total and p4total == maxTotal:  # 3, 4 tie
            print(player3 + " and " + player4 + " tied.")


catego()
